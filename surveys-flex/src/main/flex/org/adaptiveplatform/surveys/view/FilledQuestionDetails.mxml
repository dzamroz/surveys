<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
				layout="vertical"
				width="600"
				height="500"
				showCloseButton="true"
				close="close(event)"
				title="{resourceManager.getString('adaptive', 'question')} {currentQuestionNumber+1} / {questions.length}"
				creationComplete="onCreationComplete()"
				xmlns:components="adaptlearning.view.components.*"
				preinitialize="preinitialize()"
				xmlns:combocheck="org.adaptiveplatform.surveys.view.components.combocheck.*"
				xmlns:components1="org.adaptiveplatform.surveys.view.components.*"
				xmlns:renderers="org.adaptiveplatform.surveys.view.renderers.*">

	<mx:Script>
		<![CDATA[
			import mx.charts.ChartItem;
			import mx.charts.chartClasses.Series;
			import mx.charts.series.BarSeries;
			import mx.charts.series.BarSet;
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.core.UIComponent;
			import mx.graphics.codec.PNGEncoder;
			import mx.managers.PopUpManager;
			import mx.rpc.Fault;
			import mx.utils.StringUtil;
			
			import org.adaptiveplatform.surveys.application.BusinessExceptionHandler;
			import org.adaptiveplatform.surveys.application.ContextFactory;
			import org.adaptiveplatform.surveys.application.generated.EvaluationFacade;
			import org.adaptiveplatform.surveys.dto.generated.CommentQuestionCommand;
			import org.adaptiveplatform.surveys.dto.generated.FilledSurveyDto;
			import org.adaptiveplatform.surveys.dto.generated.QuestionTypeEnum;
			import org.adaptiveplatform.surveys.dto.generated.ResearchDto;
			import org.adaptiveplatform.surveys.dto.generated.SurveyQuestionAnswerDto;
			import org.adaptiveplatform.surveys.dto.generated.TagAnswerCommand;
			import org.adaptiveplatform.surveys.view.renderers.Category;
			import org.adaptiveplatform.surveys.view.renderers.CustomColumnRenderer;

			[Bindable]
			public var research:ResearchDto;

			[Bindable]
			public var questions:ArrayCollection;

			[Bindable]
			public var currentQuestionNumber:Number;

			[Bindable]
			private var filledSurveys:ArrayCollection;

			[Bindable]
			private var userAnswers:ArrayCollection=new ArrayCollection();

			[Bindable]
			private var statistics:ArrayCollection=new ArrayCollection();

			[Bindable]
			private var display:Boolean=false;

			[Bindable]
			private var open:Boolean=false;

			[Bindable]
			private var withComment:Boolean=false;

			private var evaluationFacade:EvaluationFacade;

			private function preinitialize():void {
				height=(parentApplication as Main).viewstack.height;
				width=(parentApplication as Main).viewstack.width;
			}

			private function onCreationComplete():void {
				userAnswers=new ArrayCollection();
				evaluationFacade=ContextFactory.context.service.evaluationFacade;
				filledSurveys=research.submittedSurveys;
				createStatistics();
			}

			private function previous():void {
				if (currentQuestionNumber > 0) {
					currentQuestionNumber--;
					createStatistics();
				}
			}

			private function next():void {
				if (currentQuestionNumber < questions.length - 1) {
					currentQuestionNumber++;
					createStatistics();
				}
			}

			private function close(event:Event=null):void {
				PopUpManager.removePopUp(this);
			}

			private function createStatistics():void {

				if (questions.getItemAt(currentQuestionNumber).type.equals(QuestionTypeEnum.OPEN) || research.submittedSurveys.length == 0) {
					info.text="Brak danych do wyÅ›wietlenia dla tego pytania";
				} else {
					info.text="";
				}
				open=questions.getItemAt(currentQuestionNumber).type.equals(QuestionTypeEnum.OPEN);
				withComment=questions.getItemAt(currentQuestionNumber).requiredComment() && !open;

				userAnswers=new ArrayCollection();
				var groups:Dictionary=new Dictionary();

				var allGroups:ArrayCollection=new ArrayCollection();
				for each (var filledSurvey:FilledSurveyDto in filledSurveys) {

					var array:ArrayCollection=new ArrayCollection();
					if (groups[filledSurvey.groupName]) {
						array=groups[filledSurvey.groupName].surveys;
					} else {
						allGroups.addItem(filledSurvey.groupName);
					}
					array.addAll(getSelectedAnswers(filledSurvey.questions.getItemAt(currentQuestionNumber).answers));
					groups[filledSurvey.groupName]={group: filledSurvey.groupName, surveys: array};

					userAnswers.addItem({groupName: filledSurvey.groupName, date: filledSurvey.submitDate, answer: getSelected(filledSurvey.questions.getItemAt(currentQuestionNumber).answers), comment: filledSurvey.questions.getItemAt(currentQuestionNumber).comment, category: filledSurvey.questions.getItemAt(currentQuestionNumber).tags, filledSurveyId: filledSurvey.id});
				}
				statistics=new ArrayCollection();

				for each (var group:String in allGroups) {
					var obj:Object=new Object();
					var dict:Dictionary=prepareStatistic(groups[group].surveys);

					obj["group"]=group;

					for each (var o:Object in dict) {
						obj[o.number]=o.count;
					}
					statistics.addItem(obj);

				}
				var mySeries:Array=new Array();
				var myPrintSeries:Array=new Array();

				for (var i:int=0; i < research.templateDto.questions.getItemAt(currentQuestionNumber).answers.length; i++) {
					var serie:BarSeries=new BarSeries();
					serie.xField=(i + 1).toString();
					serie.displayName=research.templateDto.questions.getItemAt(currentQuestionNumber).answers.getItemAt(i).text; //resourceManager.getString('adaptive', 'answerLabel') + " " + (i + 1);
					serie.labelField=(i + 1).toString();
					serie.setStyle("labelPosition", "inside");
					serie.maxBarWidth=15;
					mySeries.push(serie);
					
					var printSerie:BarSeries=new BarSeries();
					printSerie.xField=(i + 1).toString();
					printSerie.displayName=research.templateDto.questions.getItemAt(currentQuestionNumber).answers.getItemAt(i).text; //resourceManager.getString('adaptive', 'answerLabel') + " " + (i + 1);
					printSerie.labelField=(i + 1).toString();
					printSerie.setStyle("labelPosition", "inside");
					printSerie.maxBarWidth=15;
					myPrintSeries.push(printSerie);
					
				}
				chart.series=mySeries;
				chart.dataProvider=statistics;
				chart.validateNow();
				printChart.series=myPrintSeries;
				printChart.dataProvider=statistics;
				printChart.validateNow()
			}

			private function getSelected(list:ArrayCollection):String {
				var answerText:String="";
				for each (var answer:SurveyQuestionAnswerDto in list) {
					if (answer.selected) {
						answerText+=answer.number + ", ";
					}
				}
				if (answerText.length > 0)
					return answerText.substring(0, answerText.length - 2);
				else
					return answerText;
			}

			private function getSelectedAnswers(answers:ArrayCollection):ArrayCollection {
				var answerList:ArrayCollection=new ArrayCollection;
				if (questions.length > 0 && currentQuestionNumber < questions.length) {
					for each (var answer:SurveyQuestionAnswerDto in answers) {
						if (answer.selected) {
							answerList.addItem(answer);
						}
					}
				}
				return answerList;
			}

			private function prepareStatistic(array:ArrayCollection):Dictionary {
				var answers:Dictionary=new Dictionary();
				for each (var answer:SurveyQuestionAnswerDto in array) {
					if (answers[answer.number]) {
						answers[answer.number]={number: answer.number, count: answers[answer.number].count + 1};
					} else {
						answers[answer.number]={number: answer.number, count: 1};
					}
				}
				return answers;
			}

			private function displayDate(o:Object, col:Object):String {
				return DateField.dateToString(o[col.dataField], "DD/MM/YYYY");
			}

			private function takeSnapshot(comp:DisplayObject):void {
				
				var legendItemCSS:CSSStyleDeclaration;
				legendItemCSS = StyleManager.getStyleDeclaration("LegendItem");
				legendItemCSS.setStyle("color", "#000000");
				printlegend.invalidateDisplayList();

				display=true;
				
				(comp as UIComponent).setStyle("color", "#000000");
				(comp as UIComponent).validateNow();

				var bitmapData:BitmapData=new BitmapData(comp.width, comp.height, false, 0xffffff);

				bitmapData.draw(comp);
				var bytes:ByteArray=(new PNGEncoder()).encode(bitmapData);
				var fr:FileReference=new FileReference();
				fr.save(bytes, "chart.png");

				display=false;
				(comp as UIComponent).setStyle("color", "#ffffff");
				legendItemCSS.setStyle("color", "#ffffff");
			}

			private function takeStatistic():void {
				var spreadsheetText:String="lp.\t";
				var question:Object=questions.getItemAt(currentQuestionNumber);
				var count:Number=1;
				var answers:ArrayCollection=new ArrayCollection();
				for (var i:int=0; i < question.answers.length; i++) {
					spreadsheetText+=i + "\t";
				}
				spreadsheetText=StringUtil.trim(spreadsheetText);
				spreadsheetText+="\n";
				for each (var filledSurvey:FilledSurveyDto in filledSurveys) {
					answers=filledSurvey.questions.getItemAt(currentQuestionNumber).answers;
					spreadsheetText+=count + "\t";
					for each (var answer:SurveyQuestionAnswerDto in answers) {
						if (answer.selected) {
							spreadsheetText+="1\t";
						} else {
							spreadsheetText+="0\t";
						}
					}
					count++;
					spreadsheetText=StringUtil.trim(spreadsheetText);
					spreadsheetText+="\n";
				}
				spreadsheetText=StringUtil.trim(spreadsheetText);
				System.setClipboard(spreadsheetText);
				Alert.show(resourceManager.getString('adaptive', 'copyToClipBoardAlert'));
			}

			/*  private function filterByPhrase(object:Object):Boolean {
			   if((object.comment as String).search(phrase.text.toLowerCase())>-1)
			   return true;
			   return false;
			 } */

			private function displaySearchResult():void {
				//answerList.dataProvider.filterFunction = filterByPhrase;
				answerList.dataProvider.refresh();
				if (StringUtil.trim(phrase.text) != "") {
					phrase.dataProvider.addItem(phrase.text);
					savePhrase(phrase.text);
				}
			}

			private function savePhrase(text:String):void {
				evaluationFacade.rememberSearchPhrase(research.id, currentQuestionNumber + 1, text).onSuccess(function(o:Object):void {
					}).onFault(BusinessExceptionHandler.displayAlert(resourceManager));
			}

			private function onAddItem():void {

			}

			public function addTag(tags:ArrayCollection, filledSurveyId:Number, data:Object):void {
				var tag:TagAnswerCommand=new TagAnswerCommand();
				tag.filledSurveyId=filledSurveyId;
				tag.questionNumber=currentQuestionNumber + 1;
				tag.setTags=tags;
				tag.researchId=research.id;
				evaluationFacade.tagAnswer(tag).onSuccess(function(o:Object):void {
						data.data={category: tags};
					});
			}

			public function addComment():void {
				var comment:CommentQuestionCommand=new CommentQuestionCommand();
				comment.comment=commentArea.text;
				comment.questionId=currentQuestionNumber + 1;
				comment.researchId=research.id;
				evaluationFacade.commentQuestion(comment).onSuccess(function(o:Object):void {
						research.questions.getItemAt(currentQuestionNumber).comments=commentArea.text;
					});
			}

			private function filter(answer:Object):Boolean {
				for each (var category:Object in categories.selectedItems) {
					if (answer.category.contains(category.tag))
						return true;
				}
				return false;
			}

			private function filterByCategory(e:Event=null):void {
				userAnswers.filterFunction=filter;
				userAnswers.refresh();
			}
		]]>
	</mx:Script>
	<mx:ArrayCollection id="arrColl">
		<mx:source>
			<mx:Array id="items">
				<mx:Object label="{resourceManager.getString('adaptive', 'positive')}"
						   id="positive"
						   sel="true"
						   tag="{Category.POSITIVE}"
						   source="assets/images/positive.png"/>
				<mx:Object label="{resourceManager.getString('adaptive', 'negative')}"
						   id="negative"
						   sel="true"
						   tag="{Category.NEGATIVE}"
						   source="assets/images/negative.png"/>
				<mx:Object label="{resourceManager.getString('adaptive', 'conclusion')}"
						   id="conclusion"
						   sel="true"
						   tag="{Category.CONCLUSION}"
						   source="assets/images/conclusion.png"/>
				<mx:Object label="{resourceManager.getString('adaptive', 'ignore')}"
						   id="ignore"
						   sel="false"
						   tag="{Category.IGNORE}"
						   source="assets/images/ignore.png"/>
			</mx:Array>
		</mx:source>
	</mx:ArrayCollection>
	<mx:HBox width="100%">
		<mx:Button click="previous()"
				   icon="@Embed(source='/assets/icons/previous.png')"
				   toolTip="{resourceManager.getString('adaptive', 'previous')}"/>
		<mx:HBox width="100%"
				 horizontalAlign="center"
				 verticalAlign="middle">
			<mx:Label enabled="false"
					  id="info"
					  visible="{navigator.selectedIndex==0}"
					  includeInLayout="{navigator.selectedIndex==0}"/>
			<renderers:QuestionTypeItemRenderer question="{questions.getItemAt(currentQuestionNumber)}"
												visible="{navigator.selectedIndex!=0}"
												includeInLayout="{navigator.selectedIndex!=0}"/>
			<mx:Label enabled="false"
					  text="{questions.getItemAt(currentQuestionNumber).text}"
					  visible="{navigator.selectedIndex!=0}"
					  includeInLayout="{navigator.selectedIndex!=0}"/>
		</mx:HBox>
		<mx:Button click="next()"
				   icon="@Embed(source='/assets/icons/next.png')"
				   toolTip="{resourceManager.getString('adaptive', 'next')}"/>
	</mx:HBox>

	<mx:TabNavigator width="100%"
					 height="100%"
					 verticalGap="0"
					 id="navigator">
		<mx:HBox width="100%"
				 label="{resourceManager.getString('adaptive', 'questionDetails')}"
				 height="100%">
			<mx:VBox width="40%"
					 height="100%"
					 paddingLeft="10">
				<!--<components1:DisplayAnswerQuestionComponent question="{questions.getItemAt(currentQuestionNumber)}"/>-->
				<mx:Button click="takeSnapshot(chartSnaphot)"
						   id="takeStatistics"
						   icon="@Embed(source='/assets/icons/camera.png')"
						   label="{resourceManager.getString('adaptive', 'takeSnapshotToolTip')}"
						   toolTip="{resourceManager.getString('adaptive', 'takeSnapshotToolTip')}"
						   visible="{!open}"/>
				<mx:HBox verticalAlign="top"
						 width="100%">
					<renderers:QuestionTypeItemRenderer question="{questions.getItemAt(currentQuestionNumber)}"/>
					<mx:TextArea enabled="false"
								 htmlText="{questions.getItemAt(currentQuestionNumber).text}"
								 width="100%"
								 wordWrap="true"
								 backgroundAlpha="0"
								 editable="false"
								 borderStyle="none"
								 selectable="false"
								 horizontalScrollPolicy="off"/>
				</mx:HBox>
				<mx:Legend dataProvider="{chart}"
						   direction="horizontal"
						   id="legend"/>
			</mx:VBox>

			<mx:VBox width="60%"
					 height="100%"
					 paddingLeft="10"
					 horizontalAlign="right">
				<mx:BarChart id="chart"
							 width="100%"
							 height="100%"
							 type="100%"
							 showDataTips="true"
							 fontSize="12"
							 visible="{!open}">
					<mx:verticalAxis>
						<mx:CategoryAxis categoryField="group"
										 id="ha1"/>
					</mx:verticalAxis>

					<mx:verticalAxisRenderers>
						<mx:AxisRenderer axis="{ha1}"
										 canDropLabels="false">
							<mx:labelRenderer>
								<mx:Component>
									<mx:TextArea toolTip="{this.myTip}"
												 width="100%"
												 wordWrap="true"
												 backgroundAlpha="0"
												 editable="false"
												 borderStyle="none"
												 selectable="false"
												 horizontalScrollPolicy="off"
												 verticalScrollPolicy="off">
										<mx:Script>
											<![CDATA[
												[Bindable]
												private var myTip:String;

												override public function set data(value:Object):void {
													if (value == null)
														return;
													myTip=value.text;
													var length:int=value.text.toString().length;
													/* 	if (length > 20) {
													   text=value.text.toString().substr(0, 20) + "...";
													 } else { */
													text=value.text;
												/* } */
												}
											]]>
										</mx:Script>
									</mx:TextArea>
								</mx:Component>
							</mx:labelRenderer>
						</mx:AxisRenderer>
					</mx:verticalAxisRenderers>


					<mx:horizontalAxis>
						<mx:LinearAxis/>
					</mx:horizontalAxis>
				</mx:BarChart>

			</mx:VBox>
		</mx:HBox>
		<mx:VBox label="{resourceManager.getString('adaptive', 'filledSurveys')}"
				 verticalGap="0"
				 width="100%"
				 height="100%">
			<mx:HBox width="100%"
					 verticalAlign="middle">
				<mx:Button click="takeStatistic()"
						   icon="@Embed(source='/assets/icons/statistics.png')"
						   label="{resourceManager.getString('adaptive', 'takeStatsToolTip')}"
						   toolTip="{resourceManager.getString('adaptive', 'takeStatsToolTip')}"/>
				<mx:Label text="{resourceManager.getString('adaptive', 'search')}:"/>
				<mx:ComboBox id="phrase"
							 width="200"
							 editable="true"
							 enter="{displaySearchResult()}"
							 dataProvider="{research.questions.getItemAt(currentQuestionNumber).searchPhrases}"/>
				<mx:Button width="40"
						   toolTip="{resourceManager.getString('adaptive', 'find')}"
						   icon="@Embed(source='/assets/icons/search.png')"
						   click="{displaySearchResult()}"/>
				<mx:Button width="40"
						   toolTip="{resourceManager.getString('adaptive', 'reset')}"
						   icon="@Embed(source='/assets/icons/clear.png')"
						   click="{phrase.text = ''; displaySearchResult()}"/>

				<mx:Spacer width="100%"/>
				<combocheck:ComboCheck id="categories"
									   dataProvider="{items}"
									   labelField="label"
									   addItem="onAddItem()"
									   prompt="{resourceManager.getString('adaptive', 'selectCategory')}"/>
				<mx:Button width="40"
						   toolTip="{resourceManager.getString('adaptive', 'find')}"
						   icon="@Embed(source='/assets/icons/search.png')"
						   click="filterByCategory()"/>
				<mx:Button width="40"
						   toolTip="{resourceManager.getString('adaptive', 'reset')}"
						   icon="@Embed(source='/assets/icons/clear.png')"
						   click="{userAnswers.filterFunction=null;userAnswers.refresh()}"/>
			</mx:HBox>

			<mx:DataGrid id="answerList"
						 dataProvider="{userAnswers}"
						 doubleClickEnabled="true"
						 variableRowHeight="true"
						 rowHeight="40"
						 height="100%"
						 width="100%"
						 draggableColumns="false"
						 sortableColumns="true">
				<mx:columns>
					<mx:DataGridColumn headerText="{resourceManager.getString('adaptive', 'group')}"
									   dataField="groupName"
									   width="100"/>
					<mx:DataGridColumn headerText="{resourceManager.getString('adaptive', 'date')}"
									   dataField="date"
									   labelFunction="displayDate"
									   width="100"/>
					<mx:DataGridColumn headerText="{resourceManager.getString('adaptive', 'answer')}"
									   dataField="answer"
									   id="answerColumn"
									   visible="{!open}"/>
					<mx:DataGridColumn headerText="{resourceManager.getString('adaptive', 'answer')}"
									   dataField="comment"
									   id="openColumn"
									   visible="{open}"
									   itemRenderer="{new ClassFactory(CustomColumnRenderer)}"/>
					<mx:DataGridColumn headerText="{resourceManager.getString('adaptive', 'surveyFilling.comment')}"
									   dataField="comment"
									   visible="{withComment}"
									   minWidth="150"
									   itemRenderer="{new ClassFactory(CustomColumnRenderer)}"/>
					<mx:DataGridColumn headerText="{resourceManager.getString('adaptive', 'category')}"
									   dataField="category"
									   width="200"
									   itemRenderer="{new ClassFactory(Category)}"
									   visible="{questions.getItemAt(currentQuestionNumber).requiredComment()}"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:VBox>
		<mx:VBox label="{resourceManager.getString('adaptive', 'questionComment')}"
				 verticalGap="0"
				 width="100%"
				 height="100%">
			<mx:Label text="{resourceManager.getString('adaptive', 'commentToQuestion')}"/>
			<mx:TextArea height="100%"
						 width="100%"
						 toolTip="{resourceManager.getString('adaptive', 'placeForQuestion')}"
						 id="commentArea"
						 text="{research.questions.getItemAt(currentQuestionNumber).comments}"/>
			<mx:Button label="{resourceManager.getString('adaptive', 'addComment')}"
					   click="addComment()"/>
		</mx:VBox>

	</mx:TabNavigator>

	<mx:VBox width="1000"
			 height="100%"
			 paddingLeft="10"
			 horizontalAlign="left"
			 id="chartSnaphot"
			 visible="{display}"
			 includeInLayout="false">
		<mx:Label id="chartTitle"
				  text="{currentQuestionNumber+1}. {questions.getItemAt(currentQuestionNumber).text}"
				  includeInLayout="{display}"
				  visible="{display}"/>
		<mx:Legend dataProvider="{printChart}"
				   id="printlegend"
				   direction="horizontal"
				   visible="{display}"
				   includeInLayout="{display}"/>
		<mx:BarChart width="100%"
					 height="100%"
					 type="100%"
					 fontSize="12"
					 id="printChart">
			<mx:verticalAxis>
				<mx:CategoryAxis categoryField="group"/>
			</mx:verticalAxis>

			<mx:horizontalAxis>
				<mx:LinearAxis/>
			</mx:horizontalAxis>
		</mx:BarChart>

	</mx:VBox>

</mx:TitleWindow>
